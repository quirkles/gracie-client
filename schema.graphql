"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type User {
  id: String
  name: String
  role: Role
}

type UserWithToken {
  user: User
  token: String
}

type UserNotFound {
  message: String
}

union AuthorizeResponse = UserWithToken | UserNotFound

union CreateUserResponse = User | BadInput | Unauthorized

type Role {
  id: String
  name: String
}

type Post {
  id: String
  title: String
  body: String
  contributors: [User]
}

union CreatePostResponse = Post | BadInput | Unauthorized

input CreatePostInput {
  title: String!
  body: String
  media: [CreateMediaInput]
}

type Media {
  id: String
  title: String
  caption: String
  type: String
}

input GetUploadSignedUrlInput {
  bucketName: String!
  fileName: String!
}

input CreateMediaInput {
  title: String!
  caption: String
  url: String!
  type: MediaType
}

type BadInput {
  message: String
  reason: String
}

type Unauthorized {
  message: String
  reason: String
}

enum MediaType {
  IMAGE
}

type Query {
  getUserById: User!
  encryptTest(text: String!): String!
  getRoles: [Role]!
  getUploadSignedUrl(input: GetUploadSignedUrlInput!): String!
}

type Mutation {
  authorize(name: String!, password: String!): AuthorizeResponse
  createUser(input: CreateMediaInput): CreateUserResponse
  createPost(input: CreatePostInput!): CreatePostResponse
}
